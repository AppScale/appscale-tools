#!/usr/bin/env python
# Programmer: Brian Drawert <brian@appscale.com>

import sys
import os
# AppScale library imports
lib = os.path.dirname(__file__) + os.sep + ".." + os.sep + "lib"
sys.path.append(lib)
from appscale_tools import AppScaleTools
from remote_helper import RemoteHelper
from parse_args import ParseArgs

from agents.factory import InfrastructureAgentFactory


class AppscaleBootstrap:
  """
  TODO: Create a new 
  Currently supports: EC2
  Future support: Eucalyptus, OpenStack
  """
  

  def __init__(self,options):
    if 'keyname' in options:
      self.keyname = options.keyname
    else:
      self.keyname = 'appscale'  #default, should be redundant
    if 'infrastructure' in option:
      self.infrastructure = options.infrastructure
    else:
      self.infrastructure = 'ec2'
    #save the options
    self.options = options
    #initialize
    self.instance_id = None
    self.instance_hostname = None
    self.image_id = None
    self.appscale_branch = None
    self.appscale_revision = None
    #do a sanity check
    self.check_for_required_environment()
    #do bootstrap
    self.run()

  def run(self):
    start = time.time()
    self.start_instance()
    print "self.instance_id="+self.instance_id
    print "self.instance_hostname="+self.instance_hostname
    #self.install_appscale()
    #self.stop_instance()
    #self.create_image()
    #self.terminate_instance()
    now = time.time()
    elapsed = now - start
    print "Complete in "+str(elapsed)+" seconds"

  def start_instance(self):
    #TODO
    agent = InfrastructureAgentFactory.create_agent(self.infrastructure)
    params['image_id'] = 'ami-c7b202ae'
    params['keyname'] = self.keyname
    agent.configure_instance_security(params)
    instance_ids, public_ips, private_ips = agent.run_instances(count=1,
          parameters=params, security_configured=True)
    self.instance_id = instance_ids[0]
    self.instance_hostname = public_ips[0]



  def install_appscale(self):
    #TODO
    print "todo"

  def stop_instance(self):
    #TODO
    print "todo"

  def create_image(self):
    #TODO
    print "todo"

  def terminate_instance(self):
    #TODO
    print "todo"


  def check_for_required_environment(self):
    """
    Need to check that we have the right environmental variables set
    """
    success = 1
    if 'EC2_ACCESS_KEY' not in os.environ:
      success = 0
      print "environmental variable EC2_ACCESS_KEY not defined"
    if 'EC2_SECRET_KEY' not in os.environ:
      success = 0
      print "environmental variable EC2_SECRET_KEY not defined"
    #TODO: check that we don't need a 'keyname'
    if not success:
      print "Error, environment not correctly setup.  Exiting."
      sys.exit(0)



if __name__ == "__main__":
    #TODO: fix this hack, need to fix ParseArgs
    #options = ParseArgs(sys.argv, "appscale-bootstrap").args
    options = ParseArgs(sys.argv, "appscale-run-instances").args
    options.keyname='brian' #for testing
    AppscaleBootstrap(options)
    print "AppscaleBootstrap done"
    






################################################################################
################################################################################
#  Below is the commands that are used in the previous bootstrap script
################################################################################
################################################################################
# ec2-run-instances ami-c7b202ae -t m1.small --region us-east-1 -k brian
# /usr/bin/ssh -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no' -i ~/.appscale-tools/id_brian -l ubuntu ec2-54-234-114-29.compute-1.amazonaws.com 'cat > /tmp/appscale-install && sudo bash /tmp/appscale-install testing testing' < ~/run_cmd
# ec2-stop-instances i-fc54f48c
# ec2-describe-instance i-fc54f48c  (and wait for state=stopped)
# ec2-create-image i-fc54f48c --name appscale_cluster-1359487787-brian-1.6.6   (prints out "IMAGE   ami-e1970388")
# ec2-terminate-instances i-fc54f48c
################################################################################
################################################################################
# Below the the original script that ran on the remote box ('run_cmd' from above)
################################################################################
################################################################################
##  #!/bin/bash
##  SCRIPT_NAME=$(basename $0)
##  
##  set -e
##  
##  # update the system
##  apt-get update
##  apt-get -y upgrade
##  
##  # install git
##  apt-get install -y git-core
##  
##  cd /root
##  
##  # install AppScale
##  git clone git://github.com/AppScale/appscale.git
##  cd appscale
##  
##  [ ! -z $1 ] && git reset --hard origin/$1
##  
##  echo "appscale branch: $(basename $(git symbolic-ref HEAD))"
##  echo "appscale revision: $(git rev-parse --short HEAD)"
##  
##  bash debian/appscale_build.sh
##  
##  cd /root
##  
##  # install AppScale Tools
##  git clone git://github.com/AppScale/appscale-tools.git
##  cd appscale-tools
##  
##  [ ! -z $2 ] && git reset --hard origin/$2
##  
##  echo "appscale-tools branch: $(basename $(git symbolic-ref HEAD))"
##  echo "appscale-tools revision: $(git rev-parse --short HEAD)"
##  
##  bash debian/appscale_build.sh
################################################################################
################################################################################
