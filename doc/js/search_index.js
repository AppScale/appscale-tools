var search_data = {"index":{"searchIndex":["advancednode","appcontrollerclient","appengineconfigexception","appscaleexception","appscaletools","badcommandlineargexception","badconfigurationexception","commonfunctions","encryptionhelper","godinterface","infrastructureexception","node","nodelayout","object","parseargs","remotelogging","simplenode","usagetext","userappclient","vmtools","add_db_role()","add_instance()","add_keypair()","add_rabbitmq_role()","add_role()","app_is_running?()","appengine()","appname()","auto()","backup_neptune_info()","change_password()","clear_app()","commit_new_app()","commit_new_app_name()","commit_new_user()","commit_tar()","confirm()","convert_fqdn_to_ip()","create_user()","db_master()","delete_app()","delete_instance()","describe_instances()","does_app_exist?()","does_user_exist?()","done_uploading()","email()","encrypt_password()","ensure_keyname_not_in_use()","ensure_min_vms_available()","ensure_tools_are_installed()","errors()","errors()","expand_roles()","file()","find_real_ssh_key()","force()","generate_cloud_layout()","generate_pem_files()","generate_secret_key()","generate_ssh_key()","get_all_apps()","get_all_public_ips()","get_all_public_ips()","get_app_admin()","get_app_data()","get_app_info()","get_app_info_from_options()","get_app_name_from_tar()","get_app_name_via_xml()","get_app_name_via_yaml()","get_cloud_creds()","get_credentials()","get_creds_from_env()","get_db_master_ip()","get_email()","get_from_yaml()","get_head_node_ip()","get_hybrid_creds()","get_hybrid_env_vars()","get_hybrid_machine()","get_infrastructure()","get_initial_layout()","get_ips()","get_ips_from_yaml()","get_line_from_stdin_no_echo()","get_load_balancer_id()","get_load_balancer_ip()","get_login_ip()","get_password()","get_public_ips()","get_random_alphanumeric()","get_remote_appscale_home()","get_role_from_nodes()","get_role_info()","get_secret_key()","get_status()","get_table()","get_tar()","get_usage()","get_userappserver_ip()","get_username_from_options()","get_vals_from_args()","get_vmm_keys()","group()","h()","head_node()","help()","iaas()","infrastructure()","instance_type()","ips()","is_advanced_format?()","is_done_initializing?()","is_done_loading?()","is_live?()","is_port_open?()","is_simple_format?()","keyname()","kill()","local_ip()","login_node()","lookup_cloud_env()","machine()","make_appscale_directory()","make_call()","make_call()","max()","max_images()","min()","min_images()","move_app()","n()","new()","new()","new()","new()","nodes()","open_ports_in_cloud()","other_nodes()","parse_ip()","post()","r()","read_factor()","read_file()","read_nodes_json()","remote_post()","remove()","remove_app()","replication_factor()","require_commands()","reset_password()","restore_from_tar()","restore_neptune_info()","rsync_files()","run_instances()","run_remote_command()","scp()","scp_app_to_ip()","scp_file()","set_capabilities()","set_cloud_admin_capabilities()","set_cloud_admin_status()","set_hybrid_creds()","set_parameters()","shell()","shutdown()","sleep_until_port_is_closed()","sleep_until_port_is_open()","spawn_head_node()","spawn_head_node_via_cloud()","spawn_head_node_via_vmm()","spawn_vms()","start()","start_god()","start_head_node()","status()","stop()","stop_app()","table()","terminate_all_vms()","terminate_infrastructure_machines()","terminate_instances()","test()","to_hash()","update()","update_appcontroller()","update_locations_file()","upload_app()","usage()","user_has_cmd?()","v()","valid?()","valid?()","valid_advanced_format?()","valid_database_replication?()","valid_simple_format?()","validate_app_name()","verbose()","verify_credentials_are_set_correctly()","verify_credentials_exist()","verify_ids()","version()","w()","wait_for_app_to_start()","wait_for_nodes_to_load()","wait_until_redirect()","warn_on_large_app_size()","write_and_copy_node_file()","write_factor()","write_file()","write_node_file()","write_nodes_json()","sshcopyid"],"longSearchIndex":["advancednode","appcontrollerclient","appengineconfigexception","appscaleexception","appscaletools","badcommandlineargexception","badconfigurationexception","commonfunctions","encryptionhelper","godinterface","infrastructureexception","node","nodelayout","object","parseargs","remotelogging","simplenode","usagetext","userappclient","vmtools","node#add_db_role()","userappclient#add_instance()","appscaletools::add_keypair()","node#add_rabbitmq_role()","node#add_role()","appcontrollerclient#app_is_running?()","usagetext::appengine()","usagetext::appname()","usagetext::auto()","usagetext::backup_neptune_info()","userappclient#change_password()","commonfunctions::clear_app()","userappclient#commit_new_app()","userappclient#commit_new_app_name()","userappclient#commit_new_user()","userappclient#commit_tar()","usagetext::confirm()","commonfunctions::convert_fqdn_to_ip()","commonfunctions::create_user()","nodelayout#db_master()","userappclient#delete_app()","userappclient#delete_instance()","appscaletools::describe_instances()","userappclient#does_app_exist?()","userappclient#does_user_exist?()","appcontrollerclient#done_uploading()","usagetext::email()","commonfunctions::encrypt_password()","vmtools::ensure_keyname_not_in_use()","vmtools::ensure_min_vms_available()","vmtools::ensure_tools_are_installed()","node#errors()","nodelayout#errors()","node#expand_roles()","usagetext::file()","commonfunctions::find_real_ssh_key()","usagetext::force()","nodelayout#generate_cloud_layout()","encryptionhelper::generate_pem_files()","encryptionhelper::generate_secret_key()","encryptionhelper::generate_ssh_key()","userappclient#get_all_apps()","appcontrollerclient#get_all_public_ips()","commonfunctions::get_all_public_ips()","userappclient#get_app_admin()","userappclient#get_app_data()","commonfunctions::get_app_info()","commonfunctions::get_app_info_from_options()","commonfunctions::get_app_name_from_tar()","commonfunctions::get_app_name_via_xml()","commonfunctions::get_app_name_via_yaml()","vmtools::get_cloud_creds()","commonfunctions::get_credentials()","vmtools::get_creds_from_env()","commonfunctions::get_db_master_ip()","commonfunctions::get_email()","commonfunctions::get_from_yaml()","commonfunctions::get_head_node_ip()","vmtools::get_hybrid_creds()","vmtools::get_hybrid_env_vars()","vmtools::get_hybrid_machine()","commonfunctions::get_infrastructure()","vmtools::get_initial_layout()","vmtools::get_ips()","commonfunctions::get_ips_from_yaml()","commonfunctions::get_line_from_stdin_no_echo()","commonfunctions::get_load_balancer_id()","commonfunctions::get_load_balancer_ip()","commonfunctions::get_login_ip()","commonfunctions::get_password()","vmtools::get_public_ips()","commonfunctions::get_random_alphanumeric()","commonfunctions::get_remote_appscale_home()","commonfunctions::get_role_from_nodes()","appcontrollerclient#get_role_info()","commonfunctions::get_secret_key()","appcontrollerclient#get_status()","commonfunctions::get_table()","userappclient#get_tar()","usagetext::get_usage()","appcontrollerclient#get_userappserver_ip()","commonfunctions::get_username_from_options()","parseargs::get_vals_from_args()","vmtools::get_vmm_keys()","usagetext::group()","usagetext::h()","nodelayout#head_node()","usagetext::help()","usagetext::iaas()","usagetext::infrastructure()","usagetext::instance_type()","usagetext::ips()","nodelayout#is_advanced_format?()","appcontrollerclient#is_done_initializing?()","appcontrollerclient#is_done_loading?()","appcontrollerclient#is_live?()","commonfunctions::is_port_open?()","nodelayout#is_simple_format?()","usagetext::keyname()","appcontrollerclient#kill()","vmtools::local_ip()","nodelayout#login_node()","vmtools::lookup_cloud_env()","usagetext::machine()","commonfunctions::make_appscale_directory()","appcontrollerclient#make_call()","userappclient#make_call()","usagetext::max()","nodelayout#max_images()","usagetext::min()","nodelayout#min_images()","commonfunctions::move_app()","usagetext::n()","appcontrollerclient::new()","node::new()","nodelayout::new()","userappclient::new()","nodelayout#nodes()","vmtools::open_ports_in_cloud()","nodelayout#other_nodes()","nodelayout#parse_ip()","remotelogging::post()","usagetext::r()","nodelayout#read_factor()","commonfunctions::read_file()","commonfunctions::read_nodes_json()","remotelogging::remote_post()","godinterface::remove()","appscaletools::remove_app()","nodelayout#replication_factor()","commonfunctions::require_commands()","appscaletools::reset_password()","usagetext::restore_from_tar()","usagetext::restore_neptune_info()","commonfunctions::rsync_files()","appscaletools::run_instances()","commonfunctions::run_remote_command()","usagetext::scp()","commonfunctions::scp_app_to_ip()","commonfunctions::scp_file()","userappclient#set_capabilities()","userappclient#set_cloud_admin_capabilities()","userappclient#set_cloud_admin_status()","vmtools::set_hybrid_creds()","appcontrollerclient#set_parameters()","commonfunctions::shell()","godinterface::shutdown()","commonfunctions::sleep_until_port_is_closed()","commonfunctions::sleep_until_port_is_open()","vmtools::spawn_head_node()","vmtools::spawn_head_node_via_cloud()","vmtools::spawn_head_node_via_vmm()","vmtools::spawn_vms()","godinterface::start()","godinterface::start_god()","commonfunctions::start_head_node()","appcontrollerclient#status()","godinterface::stop()","appcontrollerclient#stop_app()","usagetext::table()","vmtools::terminate_all_vms()","vmtools::terminate_infrastructure_machines()","appscaletools::terminate_instances()","usagetext::test()","nodelayout#to_hash()","appcontrollerclient#update()","commonfunctions::update_appcontroller()","commonfunctions::update_locations_file()","appscaletools::upload_app()","usagetext::usage()","commonfunctions::user_has_cmd?()","usagetext::v()","node#valid?()","nodelayout#valid?()","nodelayout#valid_advanced_format?()","nodelayout#valid_database_replication?()","nodelayout#valid_simple_format?()","commonfunctions::validate_app_name()","usagetext::verbose()","vmtools::verify_credentials_are_set_correctly()","vmtools::verify_credentials_exist()","vmtools::verify_ids()","usagetext::version()","usagetext::w()","commonfunctions::wait_for_app_to_start()","commonfunctions::wait_for_nodes_to_load()","commonfunctions::wait_until_redirect()","commonfunctions::warn_on_large_app_size()","commonfunctions::write_and_copy_node_file()","nodelayout#write_factor()","commonfunctions::write_file()","commonfunctions::write_node_file()","commonfunctions::write_nodes_json()",""],"info":[["AdvancedNode","","AdvancedNode.html","",""],["AppControllerClient","","AppControllerClient.html","",""],["AppEngineConfigException","","AppEngineConfigException.html","","<p>a class representing exceptions related to app engine apps to be uploaded\n"],["AppScaleException","","AppScaleException.html","","<p>a generic class to represent exceptions thrown within AppScale\n"],["AppScaleTools","","AppScaleTools.html","",""],["BadCommandLineArgException","","BadCommandLineArgException.html","","<p>a class representing exceptions related to bad command line arguments (see\nlib/parse_args)\n"],["BadConfigurationException","","BadConfigurationException.html","","<p>a class representing exceptions related to incorrectly configured AppScale\ndeployments\n"],["CommonFunctions","","CommonFunctions.html","",""],["EncryptionHelper","","EncryptionHelper.html","",""],["GodInterface","","GodInterface.html","",""],["InfrastructureException","","InfrastructureException.html","","<p>a class representing exceptions related to cloud infrastructures (e.g., if\neuca or ec2 throw errors) …\n"],["Node","","Node.html","",""],["NodeLayout","","NodeLayout.html","",""],["Object","","Object.html","",""],["ParseArgs","","ParseArgs.html","",""],["RemoteLogging","","RemoteLogging.html","","<p>RemoteLogging provides callers with a mechanism by which they can save\ninformation about when the AppScale …\n"],["SimpleNode","","SimpleNode.html","",""],["UsageText","","UsageText.html","",""],["UserAppClient","","UserAppClient.html","",""],["VMTools","","VMTools.html","",""],["add_db_role","Node","Node.html#method-i-add_db_role","(db_type, is_master)",""],["add_instance","UserAppClient","UserAppClient.html#method-i-add_instance","(appname, host, port, retry_on_except=true)",""],["add_keypair","AppScaleTools","AppScaleTools.html#method-c-add_keypair","(options)",""],["add_rabbitmq_role","Node","Node.html#method-i-add_rabbitmq_role","(is_master)",""],["add_role","Node","Node.html#method-i-add_role","(role)",""],["app_is_running?","AppControllerClient","AppControllerClient.html#method-i-app_is_running-3F","(appname)",""],["appengine","UsageText","UsageText.html#method-c-appengine","()",""],["appname","UsageText","UsageText.html#method-c-appname","()",""],["auto","UsageText","UsageText.html#method-c-auto","()",""],["backup_neptune_info","UsageText","UsageText.html#method-c-backup_neptune_info","()",""],["change_password","UserAppClient","UserAppClient.html#method-i-change_password","(user, new_password, retry_on_except=true)",""],["clear_app","CommonFunctions","CommonFunctions.html#method-c-clear_app","(app_path, force=false)",""],["commit_new_app","UserAppClient","UserAppClient.html#method-i-commit_new_app","(user, app_name, language, file_location)",""],["commit_new_app_name","UserAppClient","UserAppClient.html#method-i-commit_new_app_name","(user, app_name, language, retry_on_except=true)",""],["commit_new_user","UserAppClient","UserAppClient.html#method-i-commit_new_user","(user, encrypted_password, user_type=\"xmpp_user\", retry_on_except=true)",""],["commit_tar","UserAppClient","UserAppClient.html#method-i-commit_tar","(app_name, file_location, retry_on_except=true)",""],["confirm","UsageText","UsageText.html#method-c-confirm","()",""],["convert_fqdn_to_ip","CommonFunctions","CommonFunctions.html#method-c-convert_fqdn_to_ip","(host)",""],["create_user","CommonFunctions","CommonFunctions.html#method-c-create_user","(user, test, head_node_ip, secret_key, uac, pass=nil)",""],["db_master","NodeLayout","NodeLayout.html#method-i-db_master","()",""],["delete_app","UserAppClient","UserAppClient.html#method-i-delete_app","(app, retry_on_except=true)",""],["delete_instance","UserAppClient","UserAppClient.html#method-i-delete_instance","(appname, host, port, retry_on_except=true)",""],["describe_instances","AppScaleTools","AppScaleTools.html#method-c-describe_instances","(options)",""],["does_app_exist?","UserAppClient","UserAppClient.html#method-i-does_app_exist-3F","(app, retry_on_except=true)",""],["does_user_exist?","UserAppClient","UserAppClient.html#method-i-does_user_exist-3F","(user, retry_on_except=true)",""],["done_uploading","AppControllerClient","AppControllerClient.html#method-i-done_uploading","(appname, location)",""],["email","UsageText","UsageText.html#method-c-email","()",""],["encrypt_password","CommonFunctions","CommonFunctions.html#method-c-encrypt_password","(user, pass)",""],["ensure_keyname_not_in_use","VMTools","VMTools.html#method-c-ensure_keyname_not_in_use","(keyname, infrastructure)",""],["ensure_min_vms_available","VMTools","VMTools.html#method-c-ensure_min_vms_available","(min_vms_needed, instance_type, infrastructure)",""],["ensure_tools_are_installed","VMTools","VMTools.html#method-c-ensure_tools_are_installed","(infrastructure)",""],["errors","Node","Node.html#method-i-errors","()",""],["errors","NodeLayout","NodeLayout.html#method-i-errors","()",""],["expand_roles","Node","Node.html#method-i-expand_roles","()",""],["file","UsageText","UsageText.html#method-c-file","()",""],["find_real_ssh_key","CommonFunctions","CommonFunctions.html#method-c-find_real_ssh_key","(ssh_keys, host)",""],["force","UsageText","UsageText.html#method-c-force","()",""],["generate_cloud_layout","NodeLayout","NodeLayout.html#method-i-generate_cloud_layout","()","<p>Generates an yaml file for non-hybrid cloud layouts which don’t have them\n"],["generate_pem_files","EncryptionHelper","EncryptionHelper.html#method-c-generate_pem_files","(keyname)",""],["generate_secret_key","EncryptionHelper","EncryptionHelper.html#method-c-generate_secret_key","(keyname=\"appscale\")",""],["generate_ssh_key","EncryptionHelper","EncryptionHelper.html#method-c-generate_ssh_key","(verbose, outputLocation, name, infrastructure, force)",""],["get_all_apps","UserAppClient","UserAppClient.html#method-i-get_all_apps","(retry_on_except=true)",""],["get_all_public_ips","AppControllerClient","AppControllerClient.html#method-i-get_all_public_ips","()",""],["get_all_public_ips","CommonFunctions","CommonFunctions.html#method-c-get_all_public_ips","(keyname, required=true)",""],["get_app_admin","UserAppClient","UserAppClient.html#method-i-get_app_admin","(appname, retry_on_except=true)",""],["get_app_data","UserAppClient","UserAppClient.html#method-i-get_app_data","(appname, retry_on_except=true)",""],["get_app_info","CommonFunctions","CommonFunctions.html#method-c-get_app_info","(fullpath, app_file)",""],["get_app_info_from_options","CommonFunctions","CommonFunctions.html#method-c-get_app_info_from_options","(options)",""],["get_app_name_from_tar","CommonFunctions","CommonFunctions.html#method-c-get_app_name_from_tar","(fullpath)",""],["get_app_name_via_xml","CommonFunctions","CommonFunctions.html#method-c-get_app_name_via_xml","(temp_dir, xml_loc)",""],["get_app_name_via_yaml","CommonFunctions","CommonFunctions.html#method-c-get_app_name_via_yaml","(temp_dir, app_yaml_loc)",""],["get_cloud_creds","VMTools","VMTools.html#method-c-get_cloud_creds","(node_layout, val_hash)",""],["get_credentials","CommonFunctions","CommonFunctions.html#method-c-get_credentials","(testing)",""],["get_creds_from_env","VMTools","VMTools.html#method-c-get_creds_from_env","()",""],["get_db_master_ip","CommonFunctions","CommonFunctions.html#method-c-get_db_master_ip","(keyname, required=true)",""],["get_email","CommonFunctions","CommonFunctions.html#method-c-get_email","()",""],["get_from_yaml","CommonFunctions","CommonFunctions.html#method-c-get_from_yaml","(keyname, tag, required=true)",""],["get_head_node_ip","CommonFunctions","CommonFunctions.html#method-c-get_head_node_ip","(keyname, required=true)",""],["get_hybrid_creds","VMTools","VMTools.html#method-c-get_hybrid_creds","(node_layout, set_head_node_creds=false)",""],["get_hybrid_env_vars","VMTools","VMTools.html#method-c-get_hybrid_env_vars","(cloud_type, cloud_num, set_vars=false)",""],["get_hybrid_machine","VMTools","VMTools.html#method-c-get_hybrid_machine","(infra, cloud_num)",""],["get_infrastructure","CommonFunctions","CommonFunctions.html#method-c-get_infrastructure","(keyname, required=true)",""],["get_initial_layout","VMTools","VMTools.html#method-c-get_initial_layout","(head_node, separate, num_of_nodes, total_nodes)",""],["get_ips","VMTools","VMTools.html#method-c-get_ips","(ips, verbose)",""],["get_ips_from_yaml","CommonFunctions","CommonFunctions.html#method-c-get_ips_from_yaml","(ips)",""],["get_line_from_stdin_no_echo","CommonFunctions","CommonFunctions.html#method-c-get_line_from_stdin_no_echo","()",""],["get_load_balancer_id","CommonFunctions","CommonFunctions.html#method-c-get_load_balancer_id","(keyname, required=true)",""],["get_load_balancer_ip","CommonFunctions","CommonFunctions.html#method-c-get_load_balancer_ip","(keyname, required=true)",""],["get_login_ip","CommonFunctions","CommonFunctions.html#method-c-get_login_ip","(head_node_ip, secret_key)",""],["get_password","CommonFunctions","CommonFunctions.html#method-c-get_password","()",""],["get_public_ips","VMTools","VMTools.html#method-c-get_public_ips","(ips, verbose)",""],["get_random_alphanumeric","CommonFunctions","CommonFunctions.html#method-c-get_random_alphanumeric","(length=10)",""],["get_remote_appscale_home","CommonFunctions","CommonFunctions.html#method-c-get_remote_appscale_home","(ip, key)",""],["get_role_from_nodes","CommonFunctions","CommonFunctions.html#method-c-get_role_from_nodes","(keyname, role)",""],["get_role_info","AppControllerClient","AppControllerClient.html#method-i-get_role_info","()","<p>Asks the AppController to see what roles each node is running in AppScale.\nThe result is an Array, where …\n"],["get_secret_key","CommonFunctions","CommonFunctions.html#method-c-get_secret_key","(keyname, required=true)",""],["get_status","AppControllerClient","AppControllerClient.html#method-i-get_status","()",""],["get_table","CommonFunctions","CommonFunctions.html#method-c-get_table","(keyname, required=true)",""],["get_tar","UserAppClient","UserAppClient.html#method-i-get_tar","(appname, retry_on_except=true)",""],["get_usage","UsageText","UsageText.html#method-c-get_usage","(file_name, flags)",""],["get_userappserver_ip","AppControllerClient","AppControllerClient.html#method-i-get_userappserver_ip","(verbose_level=\"low\")",""],["get_username_from_options","CommonFunctions","CommonFunctions.html#method-c-get_username_from_options","(options)",""],["get_vals_from_args","ParseArgs","ParseArgs.html#method-c-get_vals_from_args","(arg_list, all_flags, usage)",""],["get_vmm_keys","VMTools","VMTools.html#method-c-get_vmm_keys","(val_hash)",""],["group","UsageText","UsageText.html#method-c-group","()",""],["h","UsageText","UsageText.html#method-c-h","()",""],["head_node","NodeLayout","NodeLayout.html#method-i-head_node","()","<p>head node -&gt; shadow\n"],["help","UsageText","UsageText.html#method-c-help","()",""],["iaas","UsageText","UsageText.html#method-c-iaas","()",""],["infrastructure","UsageText","UsageText.html#method-c-infrastructure","()",""],["instance_type","UsageText","UsageText.html#method-c-instance_type","()",""],["ips","UsageText","UsageText.html#method-c-ips","()",""],["is_advanced_format?","NodeLayout","NodeLayout.html#method-i-is_advanced_format-3F","()",""],["is_done_initializing?","AppControllerClient","AppControllerClient.html#method-i-is_done_initializing-3F","()",""],["is_done_loading?","AppControllerClient","AppControllerClient.html#method-i-is_done_loading-3F","()",""],["is_live?","AppControllerClient","AppControllerClient.html#method-i-is_live-3F","()",""],["is_port_open?","CommonFunctions","CommonFunctions.html#method-c-is_port_open-3F","(ip, port, use_ssl=false)",""],["is_simple_format?","NodeLayout","NodeLayout.html#method-i-is_simple_format-3F","()",""],["keyname","UsageText","UsageText.html#method-c-keyname","()",""],["kill","AppControllerClient","AppControllerClient.html#method-i-kill","()",""],["local_ip","VMTools","VMTools.html#method-c-local_ip","()","<p>Code for local_ip taken from \ncoderrr.wordpress.com/2008/05/28/get-your-local-ip-address/\n"],["login_node","NodeLayout","NodeLayout.html#method-i-login_node","()",""],["lookup_cloud_env","VMTools","VMTools.html#method-c-lookup_cloud_env","(cloud)",""],["machine","UsageText","UsageText.html#method-c-machine","()",""],["make_appscale_directory","CommonFunctions","CommonFunctions.html#method-c-make_appscale_directory","()",""],["make_call","AppControllerClient","AppControllerClient.html#method-i-make_call","(time, retry_on_except, want_output=true)",""],["make_call","UserAppClient","UserAppClient.html#method-i-make_call","(timeout, retry_on_except)",""],["max","UsageText","UsageText.html#method-c-max","()",""],["max_images","NodeLayout","NodeLayout.html#method-i-max_images","()",""],["min","UsageText","UsageText.html#method-c-min","()",""],["min_images","NodeLayout","NodeLayout.html#method-i-min_images","()",""],["move_app","CommonFunctions","CommonFunctions.html#method-c-move_app","(temp_dir, filename, app_file, fullpath)",""],["n","UsageText","UsageText.html#method-c-n","()",""],["new","AppControllerClient","AppControllerClient.html#method-c-new","(ip, secret)",""],["new","Node","Node.html#method-c-new","(id, cloud, roles=[])",""],["new","NodeLayout","NodeLayout.html#method-c-new","(input_yaml, options, skip_replication=false)","<p>Required options are: database_type\n"],["new","UserAppClient","UserAppClient.html#method-c-new","(ip, secret)",""],["nodes","NodeLayout","NodeLayout.html#method-i-nodes","()",""],["open_ports_in_cloud","VMTools","VMTools.html#method-c-open_ports_in_cloud","(infrastructure, group, verbose)",""],["other_nodes","NodeLayout","NodeLayout.html#method-i-other_nodes","()",""],["parse_ip","NodeLayout","NodeLayout.html#method-i-parse_ip","(ip)",""],["post","RemoteLogging","RemoteLogging.html#method-c-post","(params)","<p>Posts a Hash of parameters to the Google App Engine application that keeps\nstatistics about when AppScale …\n"],["r","UsageText","UsageText.html#method-c-r","()",""],["read_factor","NodeLayout","NodeLayout.html#method-i-read_factor","()","<p>TODO: can we just replace the if w/ unless and change ! to = ? or does that\nnot exactly work due to the …\n"],["read_file","CommonFunctions","CommonFunctions.html#method-c-read_file","(location, chomp=true)","<p>A convenience function that returns a file’s contents as a string.\n"],["read_nodes_json","CommonFunctions","CommonFunctions.html#method-c-read_nodes_json","(keyname)","<p>Reads the JSON file that stores information about which roles run on which\nnodes.\n"],["remote_post","RemoteLogging","RemoteLogging.html#method-c-remote_post","(num_nodes, database, infrastructure, state, success)","<p>Provides a convenient interface to self.post that callers can use to save\nprofiling information about …\n"],["remove","GodInterface","GodInterface.html#method-c-remove","(watch, remote_ip=nil, remote_key=nil)",""],["remove_app","AppScaleTools","AppScaleTools.html#method-c-remove_app","(options)",""],["replication_factor","NodeLayout","NodeLayout.html#method-i-replication_factor","()",""],["require_commands","CommonFunctions","CommonFunctions.html#method-c-require_commands","(commands)",""],["reset_password","AppScaleTools","AppScaleTools.html#method-c-reset_password","(options)",""],["restore_from_tar","UsageText","UsageText.html#method-c-restore_from_tar","()",""],["restore_neptune_info","UsageText","UsageText.html#method-c-restore_neptune_info","()",""],["rsync_files","CommonFunctions","CommonFunctions.html#method-c-rsync_files","(dest_ip, ssh_key, local)","<p>Uses rsync to copy over a copy of the AppScale main codebase (e.g., not the\nAppScale Tools) from this …\n"],["run_instances","AppScaleTools","AppScaleTools.html#method-c-run_instances","(options)",""],["run_remote_command","CommonFunctions","CommonFunctions.html#method-c-run_remote_command","(ip, command, public_key_loc, want_output)",""],["scp","UsageText","UsageText.html#method-c-scp","()",""],["scp_app_to_ip","CommonFunctions","CommonFunctions.html#method-c-scp_app_to_ip","(app_name, user, language, keyname, head_node_ip, file_location, uac)",""],["scp_file","CommonFunctions","CommonFunctions.html#method-c-scp_file","(local_file_loc, remote_file_loc, target_ip, public_key_loc)",""],["set_capabilities","UserAppClient","UserAppClient.html#method-i-set_capabilities","(username, capabilities)",""],["set_cloud_admin_capabilities","UserAppClient","UserAppClient.html#method-i-set_cloud_admin_capabilities","(username)",""],["set_cloud_admin_status","UserAppClient","UserAppClient.html#method-i-set_cloud_admin_status","(username, new_status)",""],["set_hybrid_creds","VMTools","VMTools.html#method-c-set_hybrid_creds","(node_layout)",""],["set_parameters","AppControllerClient","AppControllerClient.html#method-i-set_parameters","(locations, creds, apps_to_start)",""],["shell","CommonFunctions","CommonFunctions.html#method-c-shell","(command)","<p>cgb: added in shell function for backticks so that we can unit test it\nFlexmock doesn’t like backticks …\n"],["shutdown","GodInterface","GodInterface.html#method-c-shutdown","(remote_ip=nil, remote_key=nil)",""],["sleep_until_port_is_closed","CommonFunctions","CommonFunctions.html#method-c-sleep_until_port_is_closed","(ip, port, use_ssl=false)",""],["sleep_until_port_is_open","CommonFunctions","CommonFunctions.html#method-c-sleep_until_port_is_open","(ip, port, use_ssl=false)",""],["spawn_head_node","VMTools","VMTools.html#method-c-spawn_head_node","(head_node, infrastructure, keyname, ssh_key_location, ssh_keys, force, machine, instance_type, group, verbose)",""],["spawn_head_node_via_cloud","VMTools","VMTools.html#method-c-spawn_head_node_via_cloud","(infrastructure, keyname, ssh_key_location, ssh_keys, force, head_node_jobs, machine, instance_type, group, verbose)",""],["spawn_head_node_via_vmm","VMTools","VMTools.html#method-c-spawn_head_node_via_vmm","(node, keyname, head_node_jobs)",""],["spawn_vms","VMTools","VMTools.html#method-c-spawn_vms","(num_of_vms_to_spawn, job, image_id, instance_type, keyname, infrastructure, group, verbose)",""],["start","GodInterface","GodInterface.html#method-c-start","(watch, start_cmd, stop_cmd, ports, env_vars=nil, remote_ip=nil, remote_key=nil)",""],["start_god","GodInterface","GodInterface.html#method-c-start_god","(remote_ip, remote_key)",""],["start_head_node","CommonFunctions","CommonFunctions.html#method-c-start_head_node","(options, node_layout, apps_to_start)",""],["status","AppControllerClient","AppControllerClient.html#method-i-status","()",""],["stop","GodInterface","GodInterface.html#method-c-stop","(watch, remote_ip=nil, remote_key=nil)",""],["stop_app","AppControllerClient","AppControllerClient.html#method-i-stop_app","(app_name)",""],["table","UsageText","UsageText.html#method-c-table","()",""],["terminate_all_vms","VMTools","VMTools.html#method-c-terminate_all_vms","(keyname, infrastructure)",""],["terminate_infrastructure_machines","VMTools","VMTools.html#method-c-terminate_infrastructure_machines","(infrastructure, keyname)",""],["terminate_instances","AppScaleTools","AppScaleTools.html#method-c-terminate_instances","(options)",""],["test","UsageText","UsageText.html#method-c-test","()",""],["to_hash","NodeLayout","NodeLayout.html#method-i-to_hash","()",""],["update","AppControllerClient","AppControllerClient.html#method-i-update","(app_names)",""],["update_appcontroller","CommonFunctions","CommonFunctions.html#method-c-update_appcontroller","(head_node_ip, secret, app_name, remote_file_path)",""],["update_locations_file","CommonFunctions","CommonFunctions.html#method-c-update_locations_file","(keyname, ips=nil)","<p>This function tries to contact a node in the AppScale deployment to get the\nmost up-to-date information …\n"],["upload_app","AppScaleTools","AppScaleTools.html#method-c-upload_app","(options)",""],["usage","UsageText","UsageText.html#method-c-usage","()",""],["user_has_cmd?","CommonFunctions","CommonFunctions.html#method-c-user_has_cmd-3F","(command)",""],["v","UsageText","UsageText.html#method-c-v","()",""],["valid?","Node","Node.html#method-i-valid-3F","()",""],["valid?","NodeLayout","NodeLayout.html#method-i-valid-3F","()",""],["valid_advanced_format?","NodeLayout","NodeLayout.html#method-i-valid_advanced_format-3F","()",""],["valid_database_replication?","NodeLayout","NodeLayout.html#method-i-valid_database_replication-3F","(nodes)",""],["valid_simple_format?","NodeLayout","NodeLayout.html#method-i-valid_simple_format-3F","()",""],["validate_app_name","CommonFunctions","CommonFunctions.html#method-c-validate_app_name","(app_name, database)",""],["verbose","UsageText","UsageText.html#method-c-verbose","()",""],["verify_credentials_are_set_correctly","VMTools","VMTools.html#method-c-verify_credentials_are_set_correctly","(infrastructure)",""],["verify_credentials_exist","VMTools","VMTools.html#method-c-verify_credentials_exist","()","<p>Validates that the private key and certificate for use with EC2 or\nEucalyptus both refer to files that …\n"],["verify_ids","VMTools","VMTools.html#method-c-verify_ids","(disk, infrastructure)",""],["version","UsageText","UsageText.html#method-c-version","()",""],["w","UsageText","UsageText.html#method-c-w","()",""],["wait_for_app_to_start","CommonFunctions","CommonFunctions.html#method-c-wait_for_app_to_start","(head_node_ip, secret, app_name)",""],["wait_for_nodes_to_load","CommonFunctions","CommonFunctions.html#method-c-wait_for_nodes_to_load","(head_node_ip, secret)",""],["wait_until_redirect","CommonFunctions","CommonFunctions.html#method-c-wait_until_redirect","(host, url_suffix)",""],["warn_on_large_app_size","CommonFunctions","CommonFunctions.html#method-c-warn_on_large_app_size","(fullpath)",""],["write_and_copy_node_file","CommonFunctions","CommonFunctions.html#method-c-write_and_copy_node_file","(options, node_layout, head_node_result)",""],["write_factor","NodeLayout","NodeLayout.html#method-i-write_factor","()",""],["write_file","CommonFunctions","CommonFunctions.html#method-c-write_file","(location, contents)","<p>A convenience function that can be used to write a string to a file.\n"],["write_node_file","CommonFunctions","CommonFunctions.html#method-c-write_node_file","(head_node_ip, instance_id, table, secret, db_master, ips, infrastructure, locations_yaml)",""],["write_nodes_json","CommonFunctions","CommonFunctions.html#method-c-write_nodes_json","(new_role_info, keyname)","<p>Writes the given JSON to the ~/.appscale directory so that we can read it\nlater and determine what nodes …\n"],["sshcopyid","","lib/sshcopyid.html","","<p>#!/usr/bin/env expect\n<p>############################# # # Author : Kowshik Prakasam # # An expect\nscript …\n"]]}}